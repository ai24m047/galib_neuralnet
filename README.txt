
Neural Network Evolution Project

This project uses a genetic algorithm to optimize the hyperparameters of a dynamically configurable feedforward neural network. The neural network is implemented in Python using PyTorch, and the genetic algorithm is implemented in C++ using the GAlib library.

Requirements

Python

To run the Python neural network script, the following Python packages are required:

- torch
- torchvision
- numpy
- json

You can install these dependencies using pip:

```bash
pip install torch torchvision numpy
```

C++ and GAlib

This project uses the GAlib library for genetic algorithms. GAlib can be installed by cloning it from its GitHub repository. You will need to include it in your CMake project.

1. Clone the galib repository:

   ```bash
   git clone https://github.com/jibsen/galib.git
   ```

2. Update the path to GAlib in CMakeLists.txt to point to the directory where you cloned galib:

   ```cmake
   include_directories("/path/to/galib/")  # Adjust the path accordingly
   target_link_libraries(evol_neuralnet "/path/to/galib/cmake-build-debug/libgalib.a")
   ```

3. Ensure that you link the correct libgalib.a file based on your operating system and build configuration.

CMake

This project uses CMake for building the C++ code. Make sure you have CMake installed on your system.

1. Navigate to the project directory and create a build directory:

   ```bash
   mkdir build
   cd build
   ```

2. Run CMake to generate the build files:

   ```bash
   cmake ..
   ```

3. Build the project:

   ```bash
   cmake --build .
   ```

Running the Project

Python Script (evol_neuralnet.py)

The Python script is responsible for training and evaluating the neural network. It takes a JSON-formatted string of hyperparameters as input from the C++ program.

To run the Python script standalone, you can use the following command:

```bash
python evol_neuralnet.py '{"learning_rate": 0.01, "dropout_rate": 0.2, "batch_size": 32, "epochs": 10, "activation_function": 0, "num_hidden_layers": 2, "hidden_sizes": [64, 32]}'
```

The available hyperparameters are:

- learning_rate: Learning rate for the optimizer (float)
- dropout_rate: Dropout rate for regularization (float)
- batch_size: Batch size for training (int)
- epochs: Number of epochs for training (int)
- activation_function: Activation function to use (int: 0 for ReLU, 1 for Tanh, 2 for Sigmoid, 3 for LeakyReLU)
- num_hidden_layers: Number of hidden layers (int)
- hidden_sizes: A list of integers specifying the sizes of the hidden layers (list of ints)

C++ Program (main.cpp)

The C++ program uses the GAlib library to perform evolutionary optimization of the neural network's hyperparameters. The GA algorithm evolves the population of solutions over several generations to maximize the fitness score, which is based on the accuracy and loss of the neural network.

To run the C++ program, after building it with CMake, use the following command:

```bash
./evol_neuralnet --population 20 --generations 100 --mutation 0.05 --crossover 0.8
```

The parameters are:

- --population: Size of the population for the genetic algorithm (int)
- --generations: Number of generations (int)
- --mutation: Probability of mutation (float)
- --crossover: Probability of crossover (float)

File Structure

```
├── CMakeLists.txt           # CMake build configuration
├── evol_neuralnet.py        # Python script for training the neural network
├── main.cpp                 # C++ program implementing the genetic algorithm
├── galib/                   # GAlib library directory (must be cloned from GitHub)
├── build/                   # Build directory (generated by CMake)
└── logs/                    # Log files (generated during the genetic algorithm run)
```

Logs

The C++ program writes the results of each evolutionary run to a log file located in the logs directory. The log file includes details about the neural network hyperparameters and their corresponding fitness scores.

The log file is named with the format evolution_log_<yyyy-mm-dd_hh-mm-ss>.csv.

Troubleshooting

- **CMake Errors**: If you encounter errors during the CMake build process, ensure that the path to libgalib.a is correctly specified in CMakeLists.txt and that GAlib is properly compiled.
- **Python Errors**: If the Python script fails, check that all dependencies are installed and that the hyperparameters are correctly formatted in the input JSON.

License

This project is licensed under the MIT License - see the LICENSE file for details.
